<!-- modular version -->


<script>

	var moduleNumber = 4;

	var moduleOptions = [];

		moduleOptions[moduleNumber] = {
			'moduleHeadingText': 'Module 4: Construction of scales',
			'moduleInstructions': 'Construct the following scales:',
			'totalQuestions': 3,
			'scaleOptions': ['Major', 'Natural minor', 'Harmonic minor', 'Ascending melodic minor', 'Descending melodic minor']
		}
							
</script>


 <!-- DOM constructor -->
<div class="panel panel-primary" style="display:none" id="module4">
  <div class="panel-heading">
    <script>document.write(moduleOptions[moduleNumber].moduleHeadingText);</script>
  </div>
  <div class="panel-body" id='module4Container' align="center"></div>
  <!-- not tinkering with mouse stuff now <div class="panel-heading">position marker:<p id="position_marker"></p></div> -->
   <div class="panel-heading">
    <?php include("panel_buttons.php"); ?>
   </div>
   <script> 

  		// add instructions to module head 
  		document.getElementById('module'+moduleNumber+'Container').innerHTML+='<div>'+moduleOptions[moduleNumber].moduleInstructions+'</div>';


  		// prepare modifier buttons TODO

  		function modifierPanel(questionNumber) {
  			var modifierPanel = '<input type="button" value=&#8592 onClick="moveLeft(' + questionNumber +')">';
  			modifierPanel += '<input type="button" value=&#8594 onClick="moveRight(' + questionNumber +')">';
  			modifierPanel += '<span>   </span>'
  			modifierPanel += '<input type="button" value="↑" onClick="moveDegUp(' + questionNumber +')">';
  			modifierPanel += '<input type="button" value="↓" onClick="moveDegDown(' + questionNumber + ')">';
  			modifierPanel += '<input type="button" value=&#9839 onClick="sharpDeg(' + questionNumber + ')">';
  			modifierPanel += '<input type="button" value=&#9837 onClick="flatDeg(' + questionNumber + ')">';
  			modifierPanel += '<input type="button" value="X" onClick="dblSharpDeg(' + questionNumber + ')">';
  			modifierPanel += '<input type="button"  Value=&#9837&#9837 onClick="dblFlatDeg(' + questionNumber + ')">';	

			return modifierPanel;
  		}

  		
  		
		// ----------------------------------------------------------------

		// build visual - a div cell for each scale, a canvas inside div, and render 8 C notes on treble clef

  		
 		for (i=0; i<moduleOptions[moduleNumber].totalQuestions;i++) {
  			//dynamically build up the array of divs - only really need one per line for this
			document.getElementById('module'+moduleNumber+'Container').innerHTML+='<div class="col-sm-12 col-xs-12 center"  id="module' + moduleNumber + 'Question'+i+'div"></div>';
		}
		for (i=0; i<moduleOptions[moduleNumber].totalQuestions;i++) {
  			//dynamically build up the array of instruction spacers and canvases inside divs
  			document.getElementById('module'+moduleNumber+'Question'+i+'div').innerHTML+='<div id="module' + moduleNumber +'Question' + i + 'Prompt"</div>';
			document.getElementById('module'+moduleNumber+'Question'+i+'div').innerHTML+='<table class="table"><tr><td><canvas height=100 width=800 id="module' + moduleNumber + 'Canvas'+i+'"></canvas></td><tr><td>'+modifierPanel(i)+'</td></table>';
		}

		// for testing purposes only - add a container for positioning and active note

		// fill em up - this will be separated and only executed on load!! need to render canvas, and add instructors and selectors for maj and min

		if (global_theme_override) { document.getElementById('module'+moduleNumber).setAttribute('class','panel '+global_panel_class) };
		if (global_visibility_override) { document.getElementById('module'+moduleNumber).setAttribute('style',global_initial_visibility)};

	</script>
</div>
   


 <!---RANDOMIZING DATA STAGE -->
<script> // 12/21/2015
	
	// randomize between keys and major / minor / harmonic / melodic (taken care of in options. library of keys in theory.js
	//	FROM THEORY JS, the keys are: 
	//  var keySignatures = ["C", "C#", "Db" ,"D", "Eb" ,"E", "F", "F#", "Gb", "G", "Ab", "A", "Bb", "B", "Cb"]; // not in any particular order
	// var minorKeySignatures = ["a","bb","b","c","c#","d","eb","e","f","f#","g","g#"];
	
	//parameters: length, min, max	

	// allow repeats for now
	var randomKeys=[];
	var randomScales = getRandomArray(moduleOptions[moduleNumber].totalQuestions,0,moduleOptions[moduleNumber].scaleOptions.length-1)  // res [0][i] this row is for type of scale (min, maj etc) res[1][i] is for key

	if (randomScales[0]) { // if minor key
			randomKeys[0] = getRandomInt(1,minorKeySignatures.length-1); // dont include c and a minor

		}
		else { // major
			randomKeys[0] = getRandomInt(1,keySignatures.length-1);

		}
	var i = 1;
	while (i<moduleOptions[moduleNumber].totalQuestions) {
		if (randomScales[i]>0) { // if minor key
			testNumber = getRandomInt(1,minorKeySignatures.length-1);

		}
		else {
			testNumber = getRandomInt(1,keySignatures.length-1);
		};
		
		if (randomKeys.indexOf(testNumber)==-1)
		{
			// number is unique and doesnt exist in array yet (this is an overkill, it excludes majors with minors, kinda dumb but will work)
			randomKeys[i]=testNumber;
			++i;
		}
	}
	

</script>

<!-- RENDERING STAGE -->

<script>
	// test: 	populate prompts using info from res
	for (i=0; i<moduleOptions[moduleNumber].totalQuestions;i++) {
		if (randomScales[i]>0) { 
			//minor
			document.getElementById('module'+moduleNumber+'Question'+i+'Prompt').innerHTML+=minorKeySignatures[randomKeys[i]] +" "+ moduleOptions[moduleNumber].scaleOptions[randomScales[i]];
		}
		else {
			// major
			document.getElementById('module'+4+'Question'+i+'Prompt').innerHTML+=keySignatures[randomKeys[i]] +" "+ moduleOptions[moduleNumber].scaleOptions[randomScales[i]];

		}
	}

	// set variables for active notes in each canvas
	var activeNotes = [];
	for (i=0; i<moduleOptions[moduleNumber].totalQuestions;i++) { activeNotes[i]=0; };

	/* these are the notes currently being displayed. they are used for answer checking and in order to 
	re-render the scale each time a button is pressed  - NEw: Not needed just yet. the notes variable has all the 
	necessary pitch information */

	var noteInfo = []; // necessary to store all the 3 scales

	noteInfoInit = function () {
		for (i=0; i<moduleOptions[moduleNumber].totalQuestions; i++) {
			noteInfo.push(["c/4","c/4","c/4","c/4","c/4","c/4","c/4","c/4"]);
		}
	}


	// var boundingBoxArray = []; // will hold all bounding boxes of all 3 scales, necessary to separate due to accidentals


	renderSingleScale = function (questionNumber) {
		// uses NoteInfo as global
		// only responsible for the rendering stage, NOT the array generation stage
		// notes contains 8 textual pitches that will be converted to vextab objects

		var canvasName = 'module4Canvas'+questionNumber;
		var newCanvas = document.getElementById(canvasName)


		// clear each time it is redrawn
		var context = newCanvas.getContext('2d');
        context.clearRect(0, 0, newCanvas.width, newCanvas.height);


		//var canvas = $("div.one div.a canvas")[0];
		var renderer = new Vex.Flow.Renderer(newCanvas,Vex.Flow.Renderer.Backends.CANVAS);
		var ctx = renderer.getContext();
		var stave = new Vex.Flow.Stave(0, 0,600);
		stave.addClef("treble").setContext(ctx).draw();

		var notes = []; // these are in vexflow format so not super useful for manipulation
		var tmpNoteArr =[]; // 3 cell array [root, accidental, octave] used to grab accidental for each note
		for (j=0; j<8; j++) {
			tmpNoteArr = parseVexFlowString(noteInfo[questionNumber][j]);
		    if (j == activeNotes[questionNumber]) {
		    	var tmp = new Vex.Flow.StaveNote({ keys: [noteInfo[questionNumber][j]], duration: "w", color: "blue" });	
		    	}
		    	else {
		    		var tmp = new Vex.Flow.StaveNote({ keys: [noteInfo[questionNumber][j]], duration: "w", color: "black" });		
		    	};
		    if (tmpNoteArr[1]!="") { // there is an accidental 
				tmp.addAccidental(0, new Vex.Flow.Accidental(tmpNoteArr[1]));
			}
		    notes.push(tmp); 
	
		    	//-----------------------------------------------
		   		
		}

		var voice = new Vex.Flow.Voice({
	    	num_beats: 8,
	    	beat_value: 1,
	    	resolution: Vex.Flow.RESOLUTION
	  		});
	  		// Add notes to voice
	  		voice.addTickables(notes);
			// Format and justify the notes to 500 pixels
	  		var formatter = new Vex.Flow.Formatter().joinVoices([voice]).format([voice], 600);
	  		// Render voice
	  		voice.draw(ctx, stave);

		// now that everything is formatted, recreate boundingboxes for noteheads	
		/* boundingBoxArray[questionNumber]=[];
	  	for (k=0; k<8; k++) {
	  		boundingBoxArray[questionNumber].push(notes[k].getBoundingBox());
	  	};*/

	  	// it is necessary to add a separate listener to each canvas each time it is redrawn since the positioning
	  	// of notes changes based on accidentals

	  	/* this portion sort of works but has substantial memory losses due to recursion in the event listener code
	  	will tinker more later - for now, implementing using left / right arrows 

	  	newCanvas.addEventListener("click", function() {
	  		var actbb = activeBoundingBox(event.layerX, event.layerY, boundingBoxArray[questionNumber]);
			if (actbb >=0) {
	  			//alert ('the box you selected is ' + actbb);
	  			//alert (questionNumber);
	  			//alert (notes[actbb].getKeys()); // perfect 2016/1/1
	  			activeNotes[questionNumber]=actbb;
	  			renderSingleScale(questionNumber);
	  		}
	  	}); 
		*/
	}

	changeActivePitch = function (questionNumber) {
		// changes the array of active notes for specific question
		
	
	}

	/*renderScale = function () {
		for (i=0; i<moduleOptions[moduleNumber].totalQuestions;i++) {

			canvasName = 'module4Canvas'+i;
			var newCanvas = document.getElementById(canvasName)
			var canvas = $("div.one div.a canvas")[0];
			var renderer = new Vex.Flow.Renderer(newCanvas,Vex.Flow.Renderer.Backends.CANVAS);
			var ctx = renderer.getContext();
			var stave = new Vex.Flow.Stave(0, 0,500);
			stave.addClef("treble").setContext(ctx).draw();
			//stave.addKeySignature('C').setContext(ctx).draw();

		    // Create the notes - here we have to dick around with selection and re-rendering per selection
		    var notes = [];
		    for (j=0; j<8; j++) {
		    	if (j == activeNotes[i]) {
		    		var tmp = new Vex.Flow.StaveNote({ keys: ["d/4"], duration: "w", color: "red" });	
		    	}
		    	else {
		    		var tmp = new Vex.Flow.StaveNote({ keys: ["c/4"], duration: "w", color: "black" });		
		    	};
		    	notes.push(tmp);
		    	//console.log('Scale ' + i + ' Note ' + j + ' x:', tmp.getAbsoluteX());
		    }
			
	   		// Create a voice in 4/4
	  		var voice = new Vex.Flow.Voice({
	    	num_beats: 8,
	    	beat_value: 1,
	    	resolution: Vex.Flow.RESOLUTION
	  		});
	  		// Add notes to voice
	  		voice.addTickables(notes);
			// Format and justify the notes to 500 pixels
	  		var formatter = new Vex.Flow.Formatter().joinVoices([voice]).format([voice], 500);
	  		// Render voice
	  		voice.draw(ctx, stave);

	  		newCanvas.addEventListener("click", function(){
		 	  	var actbb = activeBoundingBox(event.layerX, event.layerY, boundingBoxArray);
		  		var questionNumber = this.id.slice(-1); // this gets the number of canvas / question
	  			if (actbb >=0) {
	  				alert (actbb);
	  				alert (questionNumber);
	  				alert (notes[actbb].getKeys()); // perfect 2016/1/1
	  				activeNotes[questionNumber]=actbb;
	  				renderScale();
	  			};
			});

	  		// build an array of bounding boxes
	  	};
	  		boundingBoxArray = [];
	  		for (k=0; k<8; k++) {
	  			boundingBoxArray.push(notes[k].getBoundingBox());
	  		};


	};*/

	//renderScale();		
	// populate canvases with scales of C notes
	
  		
  	activeBoundingBox =function(x,y,boundingBoxArray,sensitivity) {
  			// 20160101 WORKS!!!!
  			// not currently in use since I am not using mouse pointer to select notes
  			/* the following function determines whether a set of x,y coordinates is in any of the array bounding boxes
  			returns 0-7 for a positive result indicating active box, or -1 if no active box found
  			sensitivity is option and is set to size of bounding box (denote 0). each increment of 1 sensitivity point
  			corresponds to +10% to bounding box */
  			if (sensitivity == undefined) { sensitivity = 0};
  			var res = -1;
  			var s = 0;
  			
  			while (res==-1 && s<8) {
  				var distance = Math.sqrt(Math.pow(boundingBoxArray[s].getX()+boundingBoxArray[s].getW()/2- x,2) + Math.pow(boundingBoxArray[s].getY()+boundingBoxArray[s].getH()/2 - y,2));

  				var boxDiagonal = (1+0.1 * sensitivity) * Math.sqrt(Math.pow(boundingBoxArray[s].getW(),2) + Math.pow(boundingBoxArray[s].getH(),2));

  				if (distance < boxDiagonal) { res = s};

  				s++;

  			};
  			return res;
  				
  		};
  		
		/* var tc = notes[1].getTickContext();
		console.log("x pos of note number" + i + "is " + stave.getNoteStartX() + "moo" + tc.getX());
  		var bb = notes[1].getBoundingBox();
  		document.getElementById("position_marker").innerHTML +='x:'+ bb.getX() + 'y:' + bb.getY() + 'w:' + bb.getW() + 'h:' + bb.getH();
  		*/
  		//add mouse positioning stuff - this is done per canvas

// ---------------------------------- selector functionality ------------------------------
	parseVexFlowString = function(str) {
	/*
	slice usage: slice() extracts up to but not including endSlice. str.
	slice(1, 4) extracts the second character through the fourth character (characters indexed 1, 2, and 3). */

		// breaks down the vexflow string from the noteInfo array into root, accidental and octave
		// eg c@@/4 = root c, accidental dbl flat, octave 4
		var root = str.slice(0,1).toString(); // root is always first
		var accidental;
		var octave = str.slice(-1).toString(); // octave is always last character

		switch (str.length) {
			case 3: {  // no accidentals, only root and octave
				accidental = "";
				break;
			}
			case 4: { // one character accidental, one sharp or one flat
				accidental = str.slice(1,2).toString();
				break;
			}
			case 5: { // two character accidental, dbl sharp or dbl flat
				accidental = str.slice(1,3).toString();
				break;
			}
		}
		return ([root,accidental,octave]);
	}

	createVexFlowString = function(arr) {
		// uses the array from parseVexflowString [root,acccidental,octave] and stitches it back to vexflow format
		// reminder. #, ##, @, @@
		return (arr[0] + arr[1] + "/" + arr[2]);
	}

	getScaleNumber = function(str) {
		// input is 3 element array!
		// converts the vexflow text to a 'scale number' where c4 is 0, b5 = 12
		var res = parseVexFlowString(str);
		var scaleNumber = 0;

		if (Number(res[2])==5) { scaleNumber+=7};

		switch (res[0]) {
			case 'c': scaleNumber += 0; break;
			case 'd': scaleNumber += 1; break;
			case 'e': scaleNumber += 2; break;
			case 'f': scaleNumber += 3; break;
			case 'g': scaleNumber += 4; break;
			case 'a': scaleNumber += 5; break;
			case 'b': scaleNumber += 6; break;
		}	

		return scaleNumber;
	}

	parseScaleNumber = function (scaleNumber) {
		//converts scale number to pitch
		// returns a 3 sell array [root, '', octave] middle is kept blank to allow for accidentals
		var octave = 4;
		var root;

		if (scaleNumber>=7) { octave=5; scaleNumber-=7;}

		switch (scaleNumber) {
			case 0: root = 'c'; break;
			case 1: root = 'd'; break;
			case 2: root = 'e'; break;
			case 3: root = 'f'; break;
			case 4: root = 'g'; break;
			case 5: root = 'a'; break;
			case 6: root = 'b'; break;
		}
		return ([root,"",octave]);
	}

	/*function convert_scalenotes_array_to_vextab_string(scaleNotes)
	{
		var str="";
		for (i=0; i<scaleNotes.length; i++)
		{
			str += noteRootNames[scaleNotes[i][0]%7]; //now actually cycles through the G->A issue
			// fix the octave problem, add "/5 if needed"
			console.log(scaleNotes[i][0]/7);
			switch (scaleNotes[i][1]){
				case 0: break;
				case 1: str +="#"; break;
				case 2: str +="##"; break;
				case -1: str +="@"; break;
				case -2: str +="@@"; break;
			}
			switch (Math.floor(scaleNotes[i][0] / 7)) {
				case 0: str +="/4";; break;
				case 1: str += "/5"; break;
				case 2: str += "/6"; break;
			}
			str +="-";
		}
		var res = str.slice(0,-1);
		return res;
	}*/
  	moveLeft = function(questionNumber) {
  		if (activeNotes[questionNumber]>0) {
  			activeNotes[questionNumber]--;
  			renderSingleScale(questionNumber);

  		}
  	}

  	moveRight = function(questionNumber) {
  		if (activeNotes[questionNumber]<7) {
  			activeNotes[questionNumber]++;
  			renderSingleScale(questionNumber);

  		}
  	}


  	 moveDegUp = function(questionNumber) {
  		var curNote = noteInfo[questionNumber][activeNotes[questionNumber]];
  		//alert(curNote);
  		var r = parseVexFlowString(curNote);
  		//alert(r[0]);

  		var n = getScaleNumber(r);

  		if (n<=12) {
  			//alert(n);

	  		var newNote = parseScaleNumber(n+1);
	  		//alert(newNote[0]);

	  		var newStr = createVexFlowString(newNote);


	  		noteInfo[questionNumber][activeNotes[questionNumber]] = newStr;

	  		renderSingleScale(questionNumber);
  		}
  		
  	}

  	moveDegDown =function(questionNumber) {
  		var curNote = noteInfo[questionNumber][activeNotes[questionNumber]];
  		//alert(curNote);
  		var r = parseVexFlowString(curNote);
  		//alert(r[0]);

  		var n = getScaleNumber(r);

  		if (n>0) {
  			//alert(n);

	  		var newNote = parseScaleNumber(n-1);
	  		//alert(newNote[0]);

	  		var newStr = createVexFlowString(newNote);


	  		noteInfo[questionNumber][activeNotes[questionNumber]] = newStr;

	  		renderSingleScale(questionNumber);
  		}
  	}	
	
	flatDeg =function(questionNumber) {
  		var curNote = noteInfo[questionNumber][activeNotes[questionNumber]];
  		//alert(curNote);
  		var r = parseVexFlowString(curNote);

  		// if already have flat, remove it. if not, add it
  		
  		if (r[1]!='b') {
  			r[1]='b';
  			
  		}
  		else { 
  			r[1]='';
   		}

   		var newStr = createVexFlowString(r);
  		//alert(r[0]);

  		noteInfo[questionNumber][activeNotes[questionNumber]] = newStr;

	  	renderSingleScale(questionNumber);
  		
  	}

  	sharpDeg =function(questionNumber) {
  		var curNote = noteInfo[questionNumber][activeNotes[questionNumber]];
  		//alert(curNote);
  		var r = parseVexFlowString(curNote);

  		// if already have flat, remove it. if not, add it
  		
  		if (r[1]!='#') {
  			r[1]='#';
  			
  		}
  		else { 
  			r[1]='';
   		}

   		var newStr = createVexFlowString(r);
  		//alert(r[0]);

  		noteInfo[questionNumber][activeNotes[questionNumber]] = newStr;

	  	renderSingleScale(questionNumber);
  		
  	}				
	
	dblFlatDeg =function(questionNumber) {
  		var curNote = noteInfo[questionNumber][activeNotes[questionNumber]];
  		//alert(curNote);
  		var r = parseVexFlowString(curNote);

  		// if already have flat, remove it. if not, add it
  		
  		if (r[1]!='bb') {
  			r[1]='bb';
  			
  		}
  		else { 
  			r[1]='';
   		}

   		var newStr = createVexFlowString(r);
  		//alert(r[0]);

  		noteInfo[questionNumber][activeNotes[questionNumber]] = newStr;

	  	renderSingleScale(questionNumber);
  		
  	}

  	dblSharpDeg =function(questionNumber) {
  		var curNote = noteInfo[questionNumber][activeNotes[questionNumber]];
  		//alert(curNote);
  		var r = parseVexFlowString(curNote);

  		// if already have flat, remove it. if not, add it
  		
  		if (r[1]!='##') {
  			r[1]='##';
  			
  		}
  		else { 
  			r[1]='';
   		}

   		var newStr = createVexFlowString(r);
  		//alert(r[0]);

  		noteInfo[questionNumber][activeNotes[questionNumber]] = newStr;

	  	renderSingleScale(questionNumber);
  		
  	}				


	/*function flatDeg(noteIndex)
	{
		if (scaleNotes[noteIndex][1]!=-1)
		{
			scaleNotes[noteIndex][1]=-1;
		}
		else
		{
			scaleNotes[noteIndex][1]=0;
		}
		var vextabstr = "stave notation=true tablature=false \n notes :w " + convert_scalenotes_array_to_vextab_string(scaleNotes) + "|";
		console.log(vextabstr);
		vextab_render_music("testcanvas4", vextabstr,"white","cow");
	}*/
	
	/*function sharpDeg(noteIndex)
	{
		if (scaleNotes[noteIndex][1]!=1)
		{
			scaleNotes[noteIndex][1]=1;
		}
		else
		{
			scaleNotes[noteIndex][1]=0;
		}
		var vextabstr = "stave notation=true tablature=false \n notes :w " + convert_scalenotes_array_to_vextab_string(scaleNotes) + "|";
		console.log(vextabstr);
		vextab_render_music("testcanvas4", vextabstr,"white","cow");
	}*/
	
	/*function dblSharpDeg(noteIndex)
	{
		if (scaleNotes[noteIndex][1]!=2)
		{
			scaleNotes[noteIndex][1]=2;
		}
		else
		{
			scaleNotes[noteIndex][1]=0;
		}
		var vextabstr = "stave notation=true tablature=false \n notes :w " + convert_scalenotes_array_to_vextab_string(scaleNotes) + "|";
		console.log(vextabstr);
		vextab_render_music("testcanvas4", vextabstr,"white","cow");
	}*/
	
	/*function dblFlatDeg(noteIndex)
	{
		if (scaleNotes[noteIndex][1]!=-2)
		{
			scaleNotes[noteIndex][1]=-2;
		}
		else
		{
			scaleNotes[noteIndex][1]=0;
		}
		var vextabstr = "stave notation=true tablature=false \n notes :w " + convert_scalenotes_array_to_vextab_string(scaleNotes) + "|";
		console.log(vextabstr);
		vextab_render_music("testcanvas4", vextabstr,"white","cow");
	}*/


  		noteInfoInit();

  		for (i=0; i<moduleOptions[moduleNumber].totalQuestions;i++) {
  			renderSingleScale(i);
  		}


  		
</script>