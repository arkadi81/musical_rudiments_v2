<!-- modular version -->


<script>

	var moduleNumber = 3;

	var moduleOptions = [];

		moduleOptions[moduleNumber] = {
			'moduleHeadingText': 'Module 3: Identification of key signatures',
			'moduleInstructions': 'Identify the following major key signatures and their relative minors',
			"totalQuestions": 6,
		}
							
</script>


 <!-- DOM constructor -->
<div class="panel panel-primary" style="display:none" id="module3">
  <div class="panel-heading">
    <script>document.write(moduleOptions[moduleNumber].moduleHeadingText);</script>
  </div>
  <div class="panel-body" id='module3Container' align="center">
  	<script> 

  		// add instructions to module head 
  		document.getElementById('module'+moduleNumber+'Container').innerHTML+='<div>'+moduleOptions[moduleNumber].moduleInstructions+'</div>';


  		// prepare major key signature selector
  		var majorKeySelector="";
  		for (i=0; i<keySignatures.length; i++) {
			majorKeySelector += "<option>" + keySignatures[i] +"</option>";
		}
		majorKeySelector = "<select>" + majorKeySelector + "</select>";

		// prepare minor key signature selector
		var minorKeySelector="";
  		for (i=0; i<minorKeySignatures.length; i++) {
			minorKeySelector += "<option>" + minorKeySignatures[i] +"</option>"; // randomize the keys later
		}
		minorKeySelector = "<select>" + minorKeySelector + "</select>"; // randomize the keys later

		// ----------------------------------------------------------------

		// for each random element of the array, create an associated note object
		

		// build visual - a div cell for each signature, a canvas inside div, and render the signature, the major selector and minor selector

  		
 		for (i=0; i<moduleOptions[moduleNumber].totalQuestions;i++) {
  			//dynamically build up the array of divs
			document.getElementById('module'+moduleNumber+'Container').innerHTML+='<div class="col-sm-4 col-xs-6 center"  id="module' + moduleNumber +'Question'+i+'div"></div>';
		}
		for (i=0; i<moduleOptions[moduleNumber].totalQuestions;i++) {
  			//dynamically build up the array of canvases inside divs
			document.getElementById('module'+moduleNumber+'Question'+i+'div').innerHTML+='<table class="table"><tr><td><canvas height=100 width=200 id="module' + moduleNumber +'Canvas'+i+'"></canvas></td><tr><td>Major: ' + majorKeySelector+'</td><tr><td>Relative minor: ' + minorKeySelector + '</td></table>';
		}

		// fill em up - this will be separated and only executed on load!! need to render canvas, and add instructors and selectors for maj and min

		if (global_theme_override) { document.getElementById('module'+moduleNumber).setAttribute('class','panel '+global_panel_class) };
		if (global_visibility_override) { document.getElementById('module'+moduleNumber).setAttribute('style',global_initial_visibility)};
	</script>
   </div>
   <div class="panel-heading">
    <?php include("panel_buttons.php"); ?>
  </div>
</div>
   


 <!---RANDOMIZING DATA STAGE -->
<script> // can definitely be made more efficient 12/16/2015
	// get predefined number of random pitches
	//parameters: length, min, max
	// build an array of random non repeating numbers which will correspond to key signatures (major only is fine). C maj isnt included
		
		var res = getRandomArray(moduleOptions[moduleNumber].totalQuestions,1,keySignatures.length-1); // dont include 0 in randomization - no C 
</script>

<!-- RENDERING STAGE -->
<script>
	// for each random element of the array, create an associated note object
	//var randomNotes = []; // this is our array to fill with random pitches for display
	for (i=0; i < moduleOptions[moduleNumber].totalQuestions; i++) {
		//cells and canvases and stuff start from 0
		//randomNotes[i] = createNoteInClef("treble",res[i]); // may be optional later. could just convert and output in single step
		//console.log("the random number " + res[i] + " corresponds to " +randomNotes[i].getFullName());
		//Note.prototype.render = function(clef, canvasColor, targetID,canvasWidth)
		//randomNotes[i].render("bleh","bleh","module1Canvas"+i+1,200);
		canvasName = 'module3Canvas'+i;
		var newCanvas = document.getElementById(canvasName);
		var canvas = $("div.one div.a canvas")[0];
		var renderer = new Vex.Flow.Renderer(newCanvas,Vex.Flow.Renderer.Backends.CANVAS);
		var ctx = renderer.getContext();
		var stave = new Vex.Flow.Stave(10, 0,100);
		//stave.addClef("treble").setContext(ctx).draw();
		stave.addKeySignature(keySignatures[res[i]]).setContext(ctx).draw();

		//add the selectors
	
		//console.log(selectionOptions);
	//add the selection box to allow for answers
		
	}

		//$("#"+myCell.id).append(selectionOptions);

		/*var canvas = $("div.one div.a canvas")[0];
		var renderer = new Vex.Flow.Renderer(newCanvas,Vex.Flow.Renderer.Backends.CANVAS);
		var ctx = renderer.getContext();
		var stave = new Vex.Flow.Stave(0, 0,100);
		//stave.addClef("treble").setContext(ctx).draw();
		stave.addKeySignature('C').setContext(ctx).draw();

	  	// Create the notes
	  	var notes = [
    		// A whole-note C.
    		new Vex.Flow.StaveNote({ keys: [randomNotes[i].getRootName()+"/"+randomNotes[i].getOctave()], duration: "w" })];


    	var voice = new Vex.Flow.Voice ({
    		num_beats: 1,
    		beat_value: 1,
    		resolution: Vex.Flow.RESOLUTION
  		});

  		// Add notes to voice
  		voice.addTickables(notes);

  		// Format and justify the notes to 500 pixels
  		var formatter = new Vex.Flow.Formatter().
  		joinVoices([voice]).format([voice], 200);

  		// Render voice
  		voice.draw(ctx, stave);
  
	}
	//add the selection box to allow for answers*/
</script>
<script>	

	//for testing
//console.log(res.toString());
	// build our selector for answering
	
	
	// Note.prototype.render = function(clef, canvasColor, targetID,canvasWidth) {
</script>

<!------------------------------------------------------>

















<script>
/*q3();
  function q3() {
var questions = q3Parameters.howManySigs["treble"] // allows to expand for bass (do we even need a clef for this?
  // build a layout table. seems to work now
  //placeHolder = document.getElementById("q21"); // works
  //document.body.insertBefore(createTableLayout(questions),placeHolder); //works
//createTableLayout(questions);
// an array containing randomized key signatures with the length: predefined amount of questions
var res = getRandomArray(questions,1,keySignatures.length-1); // dont include 0 in randomization - no C 
// for each random element of the array, create an associated note object

//populate our list of answer choices
var selectionOptions="";
for (i=0; i<keySignatures.length; i++)
{
  selectionOptions += "<option>" + keySignatures[i] +"</option>";
}
selectionOptions = "<br><select>" + selectionOptions + "</select>";
//console.log(selectionOptions);

//var randomNotes = []; // this is our array to fill with random key sigs

myTable = document.createElement("table");
myTable.border=1;
placeHolder = document.getElementById("q3");
document.body.insertBefore(myTable,placeHolder);
myRow = document.createElement("tr");
myTable.appendChild(myRow);
for (i=0; i<questions; i++)
{
		// build a cell for the new question and set it in the DOM, assign sequential ID to cell stored in cellNumber
		myCell = document.createElement("td");
		myCell.id = "cell" +cellNumber;
		newContent = document.createTextNode("I am cell number " + cellNumber);
		myCell.appendChild(newContent);
		myRow.appendChild(myCell);
		
		// --------------------------------------------- render code: get the cell to have a div inside of it, get context of div,
		// -------------------------------------------- plant a key sig inside of it
		
		//canvasName = "c" + targetID.slice(-1);
   document.getElementById(myCell.id).innerHTML="<canvas width=100 height = 120 id=c"+ cellNumber +"></canvas>";
   var newCanvas = document.getElementById("c" + cellNumber)
	// new: create a new DOM canvas for our thingy
	//var newCanvas = document.createElement("canvas");
	//var currentcanvas = document.getElementById(targetID); // lets eliminate the necessity for t1
	// todo. saparate canvas creation from the rendering process. canvas creation should go with the design element of
	// how many questions does the global indicate - table should be built based off that
	//document.body.insertBefore(newCanvas,currentcanvas);
	
	
	var canvas = $("div.one div.a canvas")[0];
	var renderer = new Vex.Flow.Renderer(newCanvas,
    Vex.Flow.Renderer.Backends.CANVAS);
	
	var ctx = renderer.getContext();
	var stave = new Vex.Flow.Stave(10, 0,75);
	//stave.addClef("treble").setContext(ctx).draw();
	stave.addKeySignature(keySignatures[res[i]]).setContext(ctx).draw();
	
	// ----------------------------------- build a key selector ---------------------------
	
	//console.log(selectionOptions);
	//add the selection box to allow for answers
	$("#"+myCell.id).append(selectionOptions);
	//for (j=0; j<rootNames.length; j++)
	//{
		
	//}
	//$("#cell"+i).append("</select>");
	
	++cellNumber;
	++canvasNumber;
	
	
	// Create the notes
    //var notes = [
    // A whole-note C.
    //new Vex.Flow.StaveNote({ keys: [this.getRootName()+"/"+this.getOctave()], duration: "w" }),

	//

    // A quarter-note D.
    //new Vex.Flow.StaveNote({ keys: ["d/4"], duration: "q" }),

    // A quarter-note rest. Note that the key (b/4) specifies the vertical
    // position of the rest.
    //new Vex.Flow.StaveNote({ keys: ["b/4"], duration: "qr" }),

    // A C-Major chord.
    //new Vex.Flow.StaveNote({ keys: ["c/4", "e/4", "g/4"], duration: "q" })
    //];

  // Create a voice in 4/4
  /*var voice = new Vex.Flow.Voice({
    num_beats: 1,
    beat_value: 1,
    resolution: Vex.Flow.RESOLUTION
  });*/

  // Add notes to voice
  //voice.addTickables(notes);

  // Format and justify the notes to 500 pixels
  //var formatter = new Vex.Flow.Formatter().
    //joinVoices([voice]).format([voice], 500);

  // Render voice
  
  //voice.draw(ctx, stave);



//}
/*	//myCanvas = document.getElementById("t1");
	//document.body.insertBefore(myTable,myCanvas);
	// return the entire object of the table for appending
	//return myTable;
//for (i=0; i < questions; i++)
//{
	//cells and canvases and stuff start from 0
	
	randomNotes[i] = createNoteInClef("treble",res[i]); // may be optional later. could just convert and output in single step
	console.log("the random number " + res[i] + " corresponds to " +randomNotes[i].getFullName());
	randomNotes[i].render("bleh","bleh","cell"+i,200);
	
	//add the selection box to allow for answers
	$("#cell"+i).append(selectionOptions);
	//for (j=0; j<rootNames.length; j++)
	//{
		
	//}
	//$("#cell"+i).append("</select>"); */
	

//}
</script>